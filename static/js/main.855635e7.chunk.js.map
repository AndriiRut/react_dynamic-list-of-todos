{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","toDos","selectedUserId","selectUser","useState","query","setQuery","filterBy","setFilterBy","className","type","value","onChange","event","target","name","list","console","log","result","filter","element","title","includes","todo","completed","prepareTodo","map","cn","readOnly","checked","userId","onClick","id","URL","a","fetch","promis","json","CurrentUser","user","setUser","useEffect","findeUsers","then","email","phone","App","setToDos","setSelectedUserId","getToDo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.855635e7.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport cn from 'classnames';\nimport { useState } from 'react';\nimport { Todo } from '../../react-app-env';\nimport './TodoList.scss';\n\ninterface Props {\n  toDos: Todo[],\n  selectedUserId: number\n  selectUser: (userId: number) => void\n}\n\nexport const TodoList: React.FC<Props> = ({\n  toDos,\n  selectedUserId,\n  selectUser,\n}) => {\n  const [query, setQuery] = useState<string>('');\n  const [filterBy, setFilterBy] = useState<string>('all');\n  // const [preparedList, setPreparedList] = useState<Todo[]>([]);\n\n  const prepareTodo = (list: Todo[]) => {\n    console.log('I started');\n    let result = list;\n\n    if (query !== '') {\n      result = result.filter((element: Todo) => (\n        element.title.includes(query)\n      ));\n    }\n\n    switch (filterBy) {\n      case 'active':\n        return result.filter((todo: Todo) => todo.completed === false);\n\n      case 'completed':\n        return result.filter((todo: Todo) => todo.completed === true);\n\n      default:\n        return result;\n    }\n  };\n\n  // const shuffle = () => {\n  //   setPreparedList((corentState: Todo[]) => (\n  //     [...corentState].sort(() => Math.random() - 0.5)\n  //   ));\n  // };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        value={query}\n        data-cy=\"filterByTitle\"\n        onChange={event => {\n          setQuery(event.target.value);\n        }}\n      />\n\n      <select\n        name=\"status\"\n        value={filterBy}\n        onChange={event => {\n          setFilterBy(event.target.value);\n        }}\n      >\n\n        <option value=\"all\">\n          All\n        </option>\n        <option value=\"active\">\n          Active\n        </option>\n        <option value=\"completed\">\n          Completed\n        </option>\n      </select>\n\n      {/* <button\n        type=\"button\"\n        onClick={shuffle}\n      >\n        Rundomize\n      </button> */}\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {prepareTodo(toDos).map((todo: Todo) => (\n            <li\n              key={todo.id}\n              className={cn('TodoList__item',\n                {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={cn('TodoList__user-button',\n                  'button',\n                  {\n                    // eslint-disable-next-line max-len\n                    'TodoList__user-button--selected': selectedUserId === todo.userId,\n                  })}\n                type=\"button\"\n                data-cy=\"userButton\"\n                onClick={() => {\n                  selectUser(todo.userId);\n                }}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { Todo, User } from '../react-app-env';\n\nconst URL = 'https://mate.academy/students-api';\n\nexport async function getToDo(): Promise<Todo[]> {\n  const promis = await fetch(`${URL}/todos`);\n\n  const result = await promis.json();\n\n  return result;\n}\n\nexport async function findeUsers(userId: number): Promise<User> {\n  const promis = await fetch(`${URL}/users/${userId}`);\n\n  const result = promis.json();\n\n  return result;\n}\n","import React, { useEffect, useState } from 'react';\nimport { findeUsers } from '../../api/api';\nimport { User } from '../../react-app-env';\nimport './CurrentUser.scss';\n\ninterface Props {\n  selectedUserId: number\n  selectUser: (userId: number) => void,\n}\n\nexport const CurrentUser: React.FC<Props> = (\n  {\n    selectedUserId,\n    selectUser,\n  },\n) => {\n  const [user, setUser] = useState<User | undefined>();\n\n  useEffect(() => {\n    findeUsers(selectedUserId)\n      .then(setUser);\n  }, [selectedUserId]);\n\n  return (\n    <>\n      {user ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${user.id}`}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\" data-cy=\"userName\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n        </div>\n      ) : 'Plaece wait, user information is loading'}\n      <button\n        type=\"button\"\n        onClick={() => {\n          selectUser(0);\n        }}\n      >\n        Clear\n      </button>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getToDo } from './api/api';\nimport { Todo } from './react-app-env';\n\nconst App: React.FC = () => {\n  const [toDos, setToDos] = useState<Todo[]>([]);\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const selectUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  useEffect(() => {\n    getToDo().then(setToDos);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          toDos={toDos}\n          selectUser={selectUser}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              selectUser={selectUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}